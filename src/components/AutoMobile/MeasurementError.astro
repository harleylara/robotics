---
// IMPORTANT: import the JSXGraph wrapper component
import JSXGraph from "../Figures/JSXGraph.astro";

const {description="Please insert the description of this figure"} = Astro.props;
---

<JSXGraph description={description}>
    <div id="measurement-error" class="jsxbox" style="width: 100%; height: 480px;">
    </div>
</JSXGraph>

<script>
// IMPORTANT: import JSXGraph
import JXG from '../../tools/jsxgraph.init.js'

let board = JXG.JSXGraph.initBoard('measurement-error', {
    boundingbox:[-5,15,10,-5],
    axis:true, 
    showNavigation:true, 
    showCopyright:false,
    keepaspectratio:true,
    defaultAxes: {
        x : {
            name: 'X',
            withLabel: true,
            label: {
                position: 'rt',
                offset: [-10, -15]
            }
        },
        y : {
            withLabel:true,
            name: 'Y',
            label: {
                position: 'rt',
                offset: [-20, -10]
            }
        }
}});

let laser_points = [[8.37,1.12],[7.31,2.74],[5.81,2.57],[5.19,4.25],[4.06,4.94],[3.25,6.37],[1.75,6.69],[1.37,7.75]]

let origin = board.create('point', [0,0], {
    fixed:true, 
    visible:false
})

let test_point = board.create('point', [2.57,8.31])

let test_line = board.create('segment', [origin, test_point], {
    dash: 2
})

let right = board.create('transform', [4,0], {type:'translate'});

let ref_point = board.create('point', [origin,right],{
    visible: false
})

let r = board.create('slider',[[1,-3],[10,-3],[0,1.66,3]], {
    name: "r"
})
let perp_line = board.create('segment',[ref_point, origin, ()=>{return r.Value()}])

let main_line = board.create('perpendicular', [perp_line, ref_point], {
    strokeColor: "red"
})

let angle = board.create('slider', [[1,-1], [10,-1], [0,47.91,90]],{
    name: "\\alpha"
})

let rotate = board.create('transform', [()=>{return (angle.Value() * Math.PI) / 180.0},origin], {type:'rotate'});
let scale = board.create('transform', [()=>{return r.Value();},()=>{return r.Value()}], {type:'scale'});
rotate.bindTo(ref_point)
scale.bindTo(ref_point)

for (const element of laser_points){
    board.create('point', element,{
        withLabel: false,
        fixed: true
    })
}

let angle_point = board.create('point', [()=>{return ref_point.X()}, 0], {visible:false})
board.create('angle', [ref_point, origin, test_point],{
    name:" ",
})

let proyection_line = board.create('line', [origin, ref_point], {
    strokeColor: "gray",
    dash: 2
})

let perp_proj_line = board.create('perpendicularsegment', [proyection_line, test_point], {
    strokeColor: "gray",
    dash: 2
})

let orthogonal_distance = board.create('text', [12,7, "d_i = \\rho \\cos(\\theta_i - \\alpha) - r"], {
    fontSize: 14
})

let d = board.create('perpendicularsegment', [main_line, test_point], {
    strokeColor: "green",
})

</script>
