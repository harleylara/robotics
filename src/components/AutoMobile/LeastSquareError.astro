---
// IMPORTANT: import the JSXGraph wrapper component
import JSXGraph from "../Figures/JSXGraph.astro";

const {description="Please insert the description of this figure"} = Astro.props;
---

<JSXGraph description={description}>
    <div id="least-square-error" class="jsxbox" style="width: 100%; height: 480px;">
    </div>
</JSXGraph>

<script>
// IMPORTANT: import JSXGraph
import JXG from '../../tools/jsxgraph.init.js'

let board = JXG.JSXGraph.initBoard('least-square-error', {
    boundingbox:[-5,15,10,-5],
    axis:true, 
    showNavigation:true, 
    showCopyright:false,
    keepaspectratio:true,
    defaultAxes: {
        x : {
            name: 'X',
            withLabel: true,
            label: {
                position: 'rt',
                offset: [-10, -15]
            }
        },
        y : {
            withLabel:true,
            name: 'Y',
            label: {
                position: 'rt',
                offset: [-20, -10]
            }
        }
}});

let laser_points = [[8.37,1.12],[7.31,2.74],[5.81,2.57],[5.19,4.25],[4.06,4.94],[3.25,6.37],[1.75,6.69],[1.37,7.75]]

let origin = board.create('point', [0,0], {
    fixed:true, 
    visible:false
})

let right = board.create('transform', [4,0], {type:'translate'});

let ref_point = board.create('point', [origin,right],{
    visible: false
})

let r = board.create('slider',[[1,-3],[10,-3],[0,1,3]], {
    name: "r"
})
let perp_line = board.create('segment',[ref_point, origin, ()=>{return r.Value()}], {
    dash: 2
})

let main_line = board.create('perpendicular', [perp_line, ref_point], {
    strokeColor: "red"
})

let angle = board.create('slider', [[1,-1], [10,-1], [0,35, 90]],{
    name: "\\alpha"
})

let rotate = board.create('transform', [()=>{return (angle.Value() * Math.PI) / 180.0},origin], {type:'rotate'});
let scale = board.create('transform', [()=>{return r.Value();},()=>{return r.Value()}], {type:'scale'});
rotate.bindTo(ref_point)
scale.bindTo(ref_point)

for (const element of laser_points){
    let sq = []
    
    let perp = board.create('perpendicularsegment', [element, main_line], {
        strokeColor: "gray", 
        withLabel: false,
        fixed: true,
        dash: 2
    })

    sq.push(perp.point)

    let right = board.create('transform', [()=>{return perp.L()},0], {type:'translate'});
    let up = board.create('transform', [0,()=>{return perp.L()}], {type:'translate'});

    sq[1] = board.create('point', [sq[0],right], {visible:false});
    sq[2] = board.create('point', [sq[0],[right,up]], {visible:false});
    sq[3] = board.create('point', [sq[0],up], {visible:false});

    let pol = board.create('polygon',sq);
    let rot = board.create('transform', [function(){return ((angle.Value() + 0)* Math.PI)/180.0;},sq[0]], {type:'rotate'});
    rot.bindTo(sq.slice(1));

}

let angle_point = board.create('point', [()=>{return ref_point.X()}, 0], {visible:false})
board.create('angle', [angle_point,origin,ref_point],{
    name:"\\alpha",
})

</script>
