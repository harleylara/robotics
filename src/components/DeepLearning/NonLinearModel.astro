---
// IMPORTANT: import the JSXGraph wrapper component
import JSXGraph from "../Figures/JSXGraph.astro";

const {description="Please insert the description of this figure"} = Astro.props;
---

<JSXGraph description={description}>
    <div id="non-linear-model" class="jsxbox" style="width: 100%; height: 480px;">
    </div>
</JSXGraph>

<script>
// IMPORTANT: import JSXGraph
import JXG from '../../tools/jsxgraph.init.js'

let board = JXG.JSXGraph.initBoard('non-linear-model', {
    boundingbox:[-5,15,10,-5],
    axis:true, 
    showNavigation:true, 
    showCopyright:false,
    keepaspectratio:true,
    defaultAxes: {
        x : {
            name: 'X',
            withLabel: true,
            label: {
                position: 'rt',
                offset: [-10, -15]
            }
        },
        y : {
            withLabel:true,
            name: 'Y',
            label: {
                position: 'rt',
                offset: [-20, -10]
            }
        }
}});

let points = [
    [0.0000, 0.0000],
    [1.5385, 5.5767],
    [3.0769, 9.8758],
    [4.6154, 11.9125],
    [6.1538, 11.2202],
    [7.6923, 7.9575],
    [9.2308, 2.8718],
    [10.7692, -2.8718],
    [12.3077, -7.9575],
    [13.8462, -11.2202],
    [15.3846, -11.9125],
    [16.9231, -9.8758],
    [18.4615, -5.5767],
    [20.0000, -0.0000],
]

let origin = board.create('point', [0,0], {
    fixed:true, 
    visible:false
})

let right = board.create('transform', [4,0], {type:'translate'});

let ref_point = board.create('point', [origin,right],{
    visible: false
})

let r = board.create('slider',[[1,-3],[10,-3],[0,1,3]], {
    name: "b"
})
let perp_line = board.create('segment',[ref_point, origin, ()=>{return r.Value()}], {
    dash: 2,
    visible: false
})

let main_line = board.create('perpendicular', [perp_line, ref_point], {
    strokeColor: "red"
})

let angle = board.create('slider', [[1,-1], [10,-1], [0,35, 90]],{
    name: "w"
})

let rotate = board.create('transform', [()=>{return (angle.Value() * Math.PI) / 180.0},origin], {type:'rotate'});
let scale = board.create('transform', [()=>{return r.Value();},()=>{return r.Value()}], {type:'scale'});
rotate.bindTo(ref_point)
scale.bindTo(ref_point)

for (const element of points){
    board.create('point', element,{
        withLabel: false,
        fixed: true
    })
}

</script>
