---
// IMPORTANT: import the JSXGraph wrapper component
import JSXGraph from "../Figures/JSXGraph.astro";

const {description="Please insert the description of this figure"} = Astro.props;
---

<JSXGraph description={description}>
    <div id="box1" class="jsxbox" style="width: 100%; height: 480px;">
    </div>
</JSXGraph>

<script>
// IMPORTANT: import JSXGraph
import JXG from '../../tools/jsxgraph.init.js'
// import katex from 'katex';
// import { NOTATION } from '../../consts.js';

let board = JXG.JSXGraph.initBoard('box1', {
    boundingbox:[-5,10,5,-5],
    axis:true, 
    showNavigation:true, 
    showCopyright:false,
    defaultAxes: {
        x : {
            name: 'X',
            withLabel: true,
            label: {
                position: 'rt',
                offset: [-10, -15]
            }
        },
        y : {
            withLabel:true,
            name: 'Y',
            label: {
                position: 'rt',
                offset: [-20, -10]
            }
        }
}});

let a = board.create('slider',
    [[-4,-2],[4,-2],[-4,1.5,4]],
    {name:'a'}
);

 // Create a button element at position [1,4].
let btnHide = board.create('button', [-4, -3, 'Hide vector', function() {
    let txt;
    btnHide.value = !btnHide.value;
    if (btnHide.value) {
  	    txt = 'Show vector';
        l1.setAttribute({visible:false});
    } else {
  	    txt = 'Hide vector';
        l1.setAttribute({visible:true});
    }
	btnHide.rendNodeButton.
        innerHTML = txt;
 }], {
        useKatex: false
    });


let p1 = board.create('point',
    [2,5]
);
let l1 = board.create('line',
    [[0,0],p1], {
    straightFirst:false,
    straightLast:false, 
    lastArrow:true,
});

l1.setAttribute({fixed:true});

let p2 = board.create('point',
    [
        function() {return a.Value()*p1.X();},
        function() {return a.Value()*p1.Y();}
    ]
);

let l2 = board.create('line',
    [[0,0],p2],
    {
        straightFirst:false,
        straightLast:false,
        lastArrow:true,
        strokeColor: "orange",
        strokeOpacity: 0.6
    }
);

let text = board.create('text',
    [-4,6,
  function() { 

    return `a \\cdot \\vv = ${a.Value().toFixed(2)} \\cdot \\begin{bmatrix} ${p1.X().toFixed(2)} \\newline ${p1.Y().toFixed(2)} \\end{bmatrix} = 
    \\begin{bmatrix} ${(a.Value()*p1.X()).toFixed(2)} \\newline ${(a.Value()*p1.Y()).toFixed(2)} \\end{bmatrix}`;
  }]
);

let segmentX = board.create(
    'line',
    [[0, function(){return p1.Y()}], p1],
    {
        straightFirst:false,
        straightLast:false,
        dash:2,
        fixed: true,
        strokeColor: "red"
    }
);
let segmentY = board.create(
    'line',
    [[function(){return p1.X()},0],p1],
    {
        straightFirst:false,
        straightLast:false,
        dash:2,
        fixed: true,
        strokeColor: "green"
    }
);

</script>
