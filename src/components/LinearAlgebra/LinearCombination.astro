---
// IMPORTANT: import the JSXGraph wrapper component
import JSXGraph from "../Figures/JSXGraph.astro";

const {description="Please insert the description of this figure"} = Astro.props;
---

<JSXGraph description={description}>
    <div id="linear-combination" class="jsxbox" style="width: 100%; height: 480px;">
    </div>
</JSXGraph>

<script>
import { triggerAsyncId } from 'async_hooks';
import JXG from '../../tools/jsxgraph.init.js'

let board = JXG.JSXGraph.initBoard('linear-combination', {
    boundingbox:[-5,10,5,-5],
    axis:true, 
    showNavigation:true, 
    showCopyright:false,
    defaultAxes: {
        x : {
            name: 'X',
            withLabel: true,
            label: {
                position: 'rt',
                offset: [-10, -15]
            }
        },
        y : {
            withLabel:true,
            name: 'Y',
            label: {
                position: 'rt',
                offset: [-20, -10]
            }
        }
}});

let b = [0, 3]; // solution
let vect1 = [2, -1];
let vect2 = [-1, 2];

let slider_x = board.create('slider', [[-3, -1], [-1, -1], [0, 0, 5]], {
    suffixLabel: 'x = ',
});

let slider_y = board.create('slider', [[-3, -3], [-1, -3], [0, 0, 5]], {
    suffixLabel: 'y = ',
});

board.create("point", vect1, {
    fixed: true,
    name: String.raw`\begin{bmatrix} ${vect1[0]} \\ ${vect1[1]} \end{bmatrix}`
});

board.create("point", vect2, {
    fixed: true,
    name: String.raw`\begin{bmatrix} ${vect2[0]} \\ ${vect2[1]} \end{bmatrix}`
});

let arrow1 = board.create("arrow", [[0, 0], vect1], {
    strokeColor: "red",
    fixed: true
});

let arrow2 = board.create("arrow", [[0, 0], vect2], {
    strokeColor: "yellow",
    fixed: true
})

board.create("point", b, {
    name: String.raw`\vb = \begin{bmatrix} ${b[0]} \\ ${b[1]} \end{bmatrix}`,
    fixed: true
})

let sol = board.create("arrow", [[0, 0], b], {
    strokeColor: "blue",
    fixed: true
});

let comb_x = board.create("arrow", [[0, 0], () => {
    return vect1.map(elem => elem * slider_y.Value());
}], {
    strokeColor: "gray",
    fixed: true,
    dash: 2,
});

let comb_y = board.create("arrow", [[0, 0], () => {
    return vect2.map(elem => elem * slider_x.Value());
}], {
    strokeColor: "gray",
    fixed: true,
    dash: 2,
})

let linear_com = board.create("arrow", [comb_x.point2, () => {
    return [comb_x.point2.X() + comb_y.point2.X(), comb_x.point2.Y() + comb_y.point2.Y()];
}]);

</script>
