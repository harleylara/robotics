---
// IMPORTANT: import the JSXGraph wrapper component
import JSXGraph from "../Figures/JSXGraph.astro";

const {description="Please insert the description of this figure"} = Astro.props;
---
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.css" integrity="sha384-vKruj+a13U8yHIkAyGgK1J3ArTLzrFGBbBc0tDp4ad/EyewESeXE/Iv67Aj8gKZ0" crossorigin="anonymous">
<script defer src="https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.js" integrity="sha384-PwRUT/YqbnEjkZO0zZxNqcxACrXe+j766U2amXcgMg5457rve2Y7I6ZJSm2A0mS4" crossorigin="anonymous"></script>

<JSXGraph description={description}>
    <div id="cross" class="jsxbox" style="width: 100%; height: 480px;">
    </div>
</JSXGraph>

<script>
// IMPORTANT: import JSXGraph
import JXG from '../../tools/jsxgraph.init.js'

import VectorLength from './VectorLength.astro';

let board = JXG.JSXGraph.initBoard('cross', {
    boundingbox:[-8,8,8,-8],
    axis:false, 
    showNavigation:true, 
    showCopyright:false,
    defaultAxes: {
        x : {
            name: 'X',
            withLabel: true,
            label: {
                position: 'rt',
                offset: [-10, -15]
            }
        },
        y : {
            withLabel:true,
            name: 'Y',
            label: {
                position: 'rt',
                offset: [-20, -10]
            }
        }
}});

let bound = [-4, 4];

let view = board.create('view3d',
    [[-4, -4], [4, 4],
    [bound, bound, bound]],
    {
        xPlaneFront: {visible: false},
        xPlaneRear: {visible: false},
        xAxis: { strokeColor: 'gray'},

        yPlaneFront: {visible: false},
        yPlaneRear: {visible: false},
        yAxis: { strokeColor: 'gray'},

        zPlaneFront: {visible: false},
        zPlaneRear: {visible: false},
        zAxis: { strokeColor: 'gray'},
    });

// Two 3D points
let vectorA = view.create('point3d', [1, 0, 0]);
let vectorB = view.create('point3d', [0, 1.6, 0]);

let lineA = view.create('line3d',
    [[0,0,0], vectorA],{
        strokeColor: 'red',
        lastArrow: true
    }
);

let lineB = view.create('line3d',
    [[0,0,0], vectorB],{
        strokeColor: 'blue',
        lastArrow: true
    }
);

</script>
